name: Multi-Platform Build

on:
  # 仅支持手动触发
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: loongarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            cross: false
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust with retry
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
      env:
        RUSTUP_IO_THREADS: "1"
      continue-on-error: true
      id: rust_install_attempt1

    - name: Retry Rust installation if first attempt failed
      if: steps.rust_install_attempt1.outcome == 'failure'
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
      env:
        RUSTUP_IO_THREADS: "1"
        RUSTUP_MAX_RETRIES: "10"
      continue-on-error: true
      id: rust_install_attempt2

    - name: Final Rust installation attempt with manual setup (Unix)
      if: steps.rust_install_attempt2.outcome == 'failure' && runner.os != 'Windows'
      run: |
        # 手动安装Rust，使用更稳定的方式
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
        source ~/.cargo/env
        rustup target add ${{ matrix.target }}
      env:
        RUSTUP_IO_THREADS: "1"

    - name: Final Rust installation attempt with manual setup (Windows)
      if: steps.rust_install_attempt2.outcome == 'failure' && runner.os == 'Windows'
      run: |
        # Windows手动安装Rust
        Invoke-WebRequest -Uri https://win.rustup.rs -OutFile rustup-init.exe
        .\rustup-init.exe -y --default-toolchain stable
        & "$env:USERPROFILE\.cargo\bin\rustup.exe" target add ${{ matrix.target }}
      env:
        RUSTUP_IO_THREADS: "1"

    - name: Ensure Rust is in PATH (Unix)
      if: runner.os != 'Windows'
      run: |
        source ~/.cargo/env || true
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Ensure Rust is in PATH (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify Rust installation (Unix)
      if: runner.os != 'Windows'
      run: |
        source ~/.cargo/env || true
        rustc --version
        cargo --version
        rustup target list --installed
        echo "Target ${{ matrix.target }} is available: $(rustup target list --installed | grep -q ${{ matrix.target }} && echo 'YES' || echo 'NO')"

    - name: Verify Rust installation (Windows)
      if: runner.os == 'Windows'
      run: |
        rustc --version
        cargo --version
        rustup target list --installed
        if (rustup target list --installed | Select-String "${{ matrix.target }}") { 
          Write-Host "Target ${{ matrix.target }} is available: YES" 
        } else { 
          Write-Host "Target ${{ matrix.target }} is available: NO" 
        }

    - name: Install musl-tools (Linux musl targets)
      if: contains(matrix.target, 'linux-musl')
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev
        # 为x86_64目标创建符号链接
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          sudo ln -sf /usr/bin/musl-gcc /usr/local/bin/x86_64-linux-musl-gcc || true
        fi

    - name: Install Windows ARM64 build tools
      if: matrix.target == 'aarch64-pc-windows-msvc'
      run: |
        # 确保安装了正确的MSVC工具链
        rustup target add aarch64-pc-windows-msvc

    - name: Install cross-compilation tool with retry (Unix)
      if: matrix.cross && runner.os != 'Windows'
      run: |
        source ~/.cargo/env || true
        # 首次尝试安装cross
        if ! cargo install cross --git https://github.com/cross-rs/cross; then
          echo "First attempt failed, retrying..."
          sleep 10
          # 第二次尝试
          if ! cargo install cross --git https://github.com/cross-rs/cross; then
            echo "Second attempt failed, trying with different approach..."
            sleep 10
            # 第三次尝试，使用crates.io版本
            cargo install cross
          fi
        fi
        cross --version

    - name: Install cross-compilation tool with retry (Windows)
      if: matrix.cross && runner.os == 'Windows'
      run: |
        # 首次尝试安装cross
        try {
          cargo install cross --git https://github.com/cross-rs/cross
        } catch {
          Write-Host "First attempt failed, retrying..."
          Start-Sleep 10
          try {
            cargo install cross --git https://github.com/cross-rs/cross
          } catch {
            Write-Host "Second attempt failed, trying with different approach..."
            Start-Sleep 10
            cargo install cross
          }
        }
        cross --version

    - name: Pre-build environment check (Unix)
      if: runner.os != 'Windows'
      run: |
        source ~/.cargo/env || true
        echo "=== Environment Check ==="
        echo "Rust version: $(rustc --version)"
        echo "Cargo version: $(cargo --version)"
        echo "Target: ${{ matrix.target }}"
        echo "Cross compilation: ${{ matrix.cross }}"
        echo "Available targets:"
        rustup target list --installed
        if [[ "${{ matrix.cross }}" == "true" ]]; then
          echo "Cross version: $(cross --version)"
        fi
        echo "========================="

    - name: Pre-build environment check (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Host "=== Environment Check ==="
        Write-Host "Rust version: $(rustc --version)"
        Write-Host "Cargo version: $(cargo --version)"
        Write-Host "Target: ${{ matrix.target }}"
        Write-Host "Cross compilation: ${{ matrix.cross }}"
        Write-Host "Available targets:"
        rustup target list --installed
        if ("${{ matrix.cross }}" -eq "true") {
          Write-Host "Cross version: $(cross --version)"
        }
        Write-Host "========================="

    - name: Build with cargo (native - Unix)
      if: matrix.cross == false && runner.os != 'Windows'
      run: |
        source ~/.cargo/env || true
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: Build with cargo (native - Windows)
      if: matrix.cross == false && runner.os == 'Windows'
      run: |
        cargo build --release --target ${{ matrix.target }} --verbose

    - name: Build with cross (cross-compilation - Unix)
      if: matrix.cross == true && runner.os != 'Windows'
      run: |
        source ~/.cargo/env || true
        cross build --release --target ${{ matrix.target }} --verbose

    - name: Build with cross (cross-compilation - Windows)
      if: matrix.cross == true && runner.os == 'Windows'
      run: |
        cross build --release --target ${{ matrix.target }} --verbose

    - name: Create artifact directory (Unix)
      if: runner.os != 'Windows'
      run: mkdir -p artifacts

    - name: Create artifact directory (Windows)
      if: runner.os == 'Windows'
      run: New-Item -ItemType Directory -Force -Path artifacts

    - name: Copy binary (Unix)
      if: matrix.os != 'windows-latest'
      run: cp target/${{ matrix.target }}/release/yp artifacts/yp-${{ matrix.target }}

    - name: Copy binary (Windows)
      if: matrix.os == 'windows-latest'
      run: cp target/${{ matrix.target }}/release/yp.exe artifacts/yp-${{ matrix.target }}.exe

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: yp-${{ matrix.target }}
        path: artifacts/*

  # 自动发布到GitHub Release
  release:
    if: github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: Display structure of downloaded files
      run: ls -la all-artifacts/

    - name: Prepare release files
      run: |
        mkdir -p release-files
        cd all-artifacts
        
        # 复制所有二进制文件到release-files目录
        for dir in */; do
          echo "Processing directory: $dir"
          cd "$dir"
          for file in *; do
            if [[ "$file" == *.exe ]]; then
              # Windows 可执行文件
              cp "$file" "../../release-files/"
            else
              # Unix 可执行文件，重命名以便区分
              cp "$file" "../../release-files/"
            fi
          done
          cd ..
        done
        
        cd ../release-files
        ls -la
        
        # 为每个文件创建zip压缩包
        for file in *; do
          if [[ "$file" == *windows* ]]; then
            zip "${file}.zip" "$file"
          else
            tar -czf "${file}.tar.gz" "$file"
          fi
        done
        
        # 显示最终的发布文件
        echo "Release files:"
        ls -la *.tar.gz *.zip 2>/dev/null || echo "No compressed files found"

    - name: Get version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"

    - name: Get current date
      id: get_date
      run: |
        DATE=$(date +'%Y%m%d_%H%M%S')
        echo "date=$DATE" >> $GITHUB_OUTPUT
        echo "Date: $DATE"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}-${{ steps.get_date.outputs.date }}
        release_name: Release ${{ steps.get_version.outputs.version }} (${{ steps.get_date.outputs.date }})
        body: |
          ## yp ${{ steps.get_version.outputs.version }}
          
          Auto-generated release with multi-platform binaries.
          
          ### Supported Platforms:
          - Linux x86_64 (musl)
          - Linux aarch64 (musl) 
          - Linux loongarch64 (musl)
          - Windows x86_64
          - Windows aarch64
          - macOS x86_64
          - macOS aarch64 (Apple Silicon)
          
          ### Usage:
          1. Download the appropriate binary for your platform
          2. Extract the archive (tar.gz for Unix/Linux/macOS, zip for Windows)
          3. Make the binary executable (Unix/Linux/macOS): `chmod +x yp-*`
          4. Run the program
          
          Built on: ${{ steps.get_date.outputs.date }}
        draft: false
        prerelease: false

    - name: Upload Linux x86_64 musl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/yp-x86_64-unknown-linux-musl.tar.gz
        asset_name: yp-x86_64-unknown-linux-musl.tar.gz
        asset_content_type: application/gzip

    - name: Upload Linux aarch64 musl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/yp-aarch64-unknown-linux-musl.tar.gz
        asset_name: yp-aarch64-unknown-linux-musl.tar.gz
        asset_content_type: application/gzip

    - name: Upload Linux loongarch64 musl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/yp-loongarch64-unknown-linux-musl.tar.gz
        asset_name: yp-loongarch64-unknown-linux-musl.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/yp-x86_64-pc-windows-msvc.exe.zip
        asset_name: yp-x86_64-pc-windows-msvc.zip
        asset_content_type: application/zip

    - name: Upload Windows aarch64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/yp-aarch64-pc-windows-msvc.exe.zip
        asset_name: yp-aarch64-pc-windows-msvc.zip
        asset_content_type: application/zip

    - name: Upload macOS x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/yp-x86_64-apple-darwin.tar.gz
        asset_name: yp-x86_64-apple-darwin.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS aarch64 (Apple Silicon)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-files/yp-aarch64-apple-darwin.tar.gz
        asset_name: yp-aarch64-apple-darwin.tar.gz
        asset_content_type: application/gzip
